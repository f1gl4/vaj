import { useEffect, useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';

import { Typography, Card, CardContent, Button, TextField } from '@mui/material';
import { Stack, List, ListItem, ListItemText } from '@mui/material';
import { getMalware, deleteMalware, addIncident, deleteIncident } from '../api';


export default function MalwareDetail() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [malware, setMalware] = useState(null);
  const [incidentForm, setIncidentForm] = useState({
    occurredAt: '',
    location: '',
    summary: '',
    victims: 1,
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    getMalware(id)
      .then(res => setMalware(res.data))
      .finally(() => setLoading(false));
  }, [id]);

  if (loading) return <Typography>Loading</Typography>;
  if (!malware) return <Typography variant="h6">Not found</Typography>;

  // handles
  const handleDelete = async () => {
    await deleteMalware(id);
    navigate('/malware');
  };

  const handleAddIncident = async e => {
    e.preventDefault();
    await addIncident(id, incidentForm);

    const res = await getMalware(id);
    setMalware(res.data);
    setIncidentForm({ occurredAt: '', location: '', summary: '' });
  };

  return (
    <>
      <Typography variant="h4" gutterBottom>
        {malware.name}
      </Typography>

      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography>Type: {malware.type}</Typography>
          <Typography>Severity: {malware.severity}</Typography>
          <Typography>First seen: {new Date(malware.firstSeen).toDateString()}</Typography>
          <Typography sx={{ mt: 1 }}>{malware.description}</Typography>
          {malware.referenceUrl && (
            <Typography component="a" href={malware.referenceUrl} target="_blank" rel="noopener">
              More info
            </Typography>
          )}
          <Stack direction="row" spacing={2} sx={{ mt: 2 }}>
            <Button variant="outlined" component={Link} to={`/malware/${id}/edit`}>
              Edit
            </Button>
            <Button color="error" variant="contained" onClick={handleDelete}>
              Delete
            </Button>
          </Stack>
        </CardContent>
      </Card>

      {/* incidents list */}
      <Typography variant="h5" gutterBottom>Incidents</Typography>
      {malware.incidents.length === 0 ? (
        <Typography>No incidents yet</Typography>
      ) : (
        <List sx={{ mb: 3 }}>
          {malware.incidents.map(inc => (

            <ListItem   key={inc.id}
            secondaryAction={
              <Button
                color="error"
                size="small"
                onClick={async () => {
                  await deleteIncident(inc.id);
                  const res = await getMalware(id);
                  setMalware(res.data);
                }}
              >
                X
              </Button>
            }>

              <ListItemText
                primary={`${new Date(inc.occurredAt).toLocaleDateString()} â€“ ${inc.location || 'Unknown'}`}
                secondary={inc.summary}
              />

            </ListItem>
          ))}
        </List>
      )}

      {/* add incident form */}
      <Typography variant="h6" gutterBottom>Add incident</Typography>
      <form onSubmit={handleAddIncident}>
        <Stack spacing={2} sx={{ maxWidth: 400 }}>
          <TextField
            label="Date"
            type="date"
            value={incidentForm.occurredAt}
            InputLabelProps={{ shrink: true }}
            onChange={e => setIncidentForm({ ...incidentForm, occurredAt: e.target.value })}
            required
          />
          <TextField
            label="Location"
            value={incidentForm.location}
            onChange={e => setIncidentForm({ ...incidentForm, location: e.target.value })}
            required
          />
          <TextField
            label="Summary"
            multiline
            rows={3}
            value={incidentForm.summary}
            onChange={e => setIncidentForm({ ...incidentForm, summary: e.target.value })}
          />
          <TextField
            label="Victims"
            type="number"
            inputProps={{ min:1 }}
            value={incidentForm.victims}
            onChange={e => setIncidentForm({ ...incidentForm, victims: e.target.value })}
            required
          />
          <Button type="submit" variant="contained">Save</Button>
        </Stack>
      </form>
    </>
  );
}